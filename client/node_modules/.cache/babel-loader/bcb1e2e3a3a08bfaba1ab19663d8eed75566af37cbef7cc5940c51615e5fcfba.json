{"ast":null,"code":"// export const scroll = (targetValue, duration) => {\n//     const startValue = parseInt(window.scrollY);\n//     const distance = targetValue+10 - startValue;\n//     const startTime = performance.now();\n//     function animationStep() {\n//         const elapsed = performance.now() - startTime;\n//         const progress = Math.min(elapsed / duration, 1);\n//         const currentValue = startValue + distance * progress;\n//         window.scrollTo(0, currentValue);\n//         if (progress < 1) {\n//             requestAnimationFrame(animationStep);\n//         }\n//     }\n\n//     requestAnimationFrame(animationStep);\n// }\n\nexport const scroll = (target, duration) => {\n  const animation = (interval, target) => {\n    const timer = setInterval(() => {\n      const currentValue = parseInt(window.scrollY);\n      window.scrollBy(0, (target - currentValue) / 20);\n    }, interval);\n  };\n  requestAnimationFrame(this.animation(duration / 20, target));\n};","map":{"version":3,"names":["scroll","target","duration","animation","interval","timer","setInterval","currentValue","parseInt","window","scrollY","scrollBy","requestAnimationFrame"],"sources":["/Users/yutongzhu/Documents/github-repo/My-Personal-Website/src/Animation/scroll.animate.js"],"sourcesContent":["// export const scroll = (targetValue, duration) => {\n//     const startValue = parseInt(window.scrollY);\n//     const distance = targetValue+10 - startValue;\n//     const startTime = performance.now();\n//     function animationStep() {\n//         const elapsed = performance.now() - startTime;\n//         const progress = Math.min(elapsed / duration, 1);\n//         const currentValue = startValue + distance * progress;\n//         window.scrollTo(0, currentValue);\n//         if (progress < 1) {\n//             requestAnimationFrame(animationStep);\n//         }\n//     }\n\n//     requestAnimationFrame(animationStep);\n// }\n\nexport const scroll=(target, duration)=>{\n    const animation=(interval, target)=>{\n        const timer = setInterval(()=>{\n            const currentValue=parseInt(window.scrollY)\n            window.scrollBy(0, (target-currentValue)/20);\n        }, interval)\n    }\n    requestAnimationFrame(this.animation(duration/20 ,target))\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,OAAO,MAAMA,MAAM,GAACA,CAACC,MAAM,EAAEC,QAAQ,KAAG;EACpC,MAAMC,SAAS,GAACA,CAACC,QAAQ,EAAEH,MAAM,KAAG;IAChC,MAAMI,KAAK,GAAGC,WAAW,CAAC,MAAI;MAC1B,MAAMC,YAAY,GAACC,QAAQ,CAACC,MAAM,CAACC,OAAO,CAAC;MAC3CD,MAAM,CAACE,QAAQ,CAAC,CAAC,EAAE,CAACV,MAAM,GAACM,YAAY,IAAE,EAAE,CAAC;IAChD,CAAC,EAAEH,QAAQ,CAAC;EAChB,CAAC;EACDQ,qBAAqB,CAAC,IAAI,CAACT,SAAS,CAACD,QAAQ,GAAC,EAAE,EAAED,MAAM,CAAC,CAAC;AAC9D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}